package com.apkbus.kdatastore.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.apkbus.kdatastore.greendao.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "t_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property UId = new Property(1, long.class, "uId", false, "u_id");
        public final static Property URealName = new Property(2, String.class, "uRealName", false, "u_realname");
        public final static Property USex = new Property(3, String.class, "uSex", false, "u_sex");
        public final static Property UBirthday = new Property(4, String.class, "uBirthday", false, "u_birthday");
        public final static Property UHeight = new Property(5, float.class, "uHeight", false, "u_height");
        public final static Property UWeight = new Property(6, float.class, "uWeight", false, "u_weight");
        public final static Property UDomicile = new Property(7, String.class, "uDomicile", false, "u_domicile");
        public final static Property UPhone = new Property(8, long.class, "uPhone", false, "u_phone");
        public final static Property UEmail = new Property(9, String.class, "uEmail", false, "u_email");
        public final static Property UWeibo = new Property(10, String.class, "uWeibo", false, "u_weibo");
    }

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"u_id\" INTEGER NOT NULL UNIQUE ," + // 1: uId
                "\"u_realname\" TEXT," + // 2: uRealName
                "\"u_sex\" TEXT," + // 3: uSex
                "\"u_birthday\" TEXT," + // 4: uBirthday
                "\"u_height\" REAL NOT NULL ," + // 5: uHeight
                "\"u_weight\" REAL NOT NULL ," + // 6: uWeight
                "\"u_domicile\" TEXT," + // 7: uDomicile
                "\"u_phone\" INTEGER NOT NULL ," + // 8: uPhone
                "\"u_email\" TEXT," + // 9: uEmail
                "\"u_weibo\" TEXT);"); // 10: uWeibo
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_t_user__id ON \"t_user\"" +
                " (\"_id\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_t_user_u_id_DESC ON \"t_user\"" +
                " (\"u_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getUId());
 
        String uRealName = entity.getURealName();
        if (uRealName != null) {
            stmt.bindString(3, uRealName);
        }
 
        String uSex = entity.getUSex();
        if (uSex != null) {
            stmt.bindString(4, uSex);
        }
 
        String uBirthday = entity.getUBirthday();
        if (uBirthday != null) {
            stmt.bindString(5, uBirthday);
        }
        stmt.bindDouble(6, entity.getUHeight());
        stmt.bindDouble(7, entity.getUWeight());
 
        String uDomicile = entity.getUDomicile();
        if (uDomicile != null) {
            stmt.bindString(8, uDomicile);
        }
        stmt.bindLong(9, entity.getUPhone());
 
        String uEmail = entity.getUEmail();
        if (uEmail != null) {
            stmt.bindString(10, uEmail);
        }
 
        String uWeibo = entity.getUWeibo();
        if (uWeibo != null) {
            stmt.bindString(11, uWeibo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getUId());
 
        String uRealName = entity.getURealName();
        if (uRealName != null) {
            stmt.bindString(3, uRealName);
        }
 
        String uSex = entity.getUSex();
        if (uSex != null) {
            stmt.bindString(4, uSex);
        }
 
        String uBirthday = entity.getUBirthday();
        if (uBirthday != null) {
            stmt.bindString(5, uBirthday);
        }
        stmt.bindDouble(6, entity.getUHeight());
        stmt.bindDouble(7, entity.getUWeight());
 
        String uDomicile = entity.getUDomicile();
        if (uDomicile != null) {
            stmt.bindString(8, uDomicile);
        }
        stmt.bindLong(9, entity.getUPhone());
 
        String uEmail = entity.getUEmail();
        if (uEmail != null) {
            stmt.bindString(10, uEmail);
        }
 
        String uWeibo = entity.getUWeibo();
        if (uWeibo != null) {
            stmt.bindString(11, uWeibo);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // uId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uRealName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uBirthday
            cursor.getFloat(offset + 5), // uHeight
            cursor.getFloat(offset + 6), // uWeight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uDomicile
            cursor.getLong(offset + 8), // uPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // uEmail
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // uWeibo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUId(cursor.getLong(offset + 1));
        entity.setURealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUHeight(cursor.getFloat(offset + 5));
        entity.setUWeight(cursor.getFloat(offset + 6));
        entity.setUDomicile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUPhone(cursor.getLong(offset + 8));
        entity.setUEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUWeibo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
